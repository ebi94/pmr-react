{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props) {\n    _classCallCheck(this, Switch);\n\n    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));\n\n    _this.state = {\n      offset: 0,\n      skipAnimation: true,\n      dragStart: false,\n      focus: false,\n      value: props.value != undefined ? props.value : props.defaultValue,\n      labelWidth: props.labelWidth,\n      handleWidth: props.handleWidth\n    };\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._recalculateWidth();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      var newValue = nextProps.value !== undefined ? nextProps.value : this.state.value;\n      var oldValue = this.state.value; // ensure width is updated\n\n      this.setState({\n        labelWidth: nextProps.labelWidth,\n        handleWidth: nextProps.handleWidth,\n        value: newValue\n      }, function () {\n        _this2._recalculateWidth(newValue == oldValue);\n      });\n    }\n  }, {\n    key: '_getValue',\n    value: function _getValue() {\n      if (this.props.value !== undefined) return this.props.value;\n      return this.state.value;\n    }\n  }, {\n    key: 'value',\n    value: function value(val) {\n      if (val === undefined) return this.state.value;\n      var newVal = val === null ? null : !!val;\n\n      this._setValue(newVal);\n\n      return newVal;\n    }\n  }, {\n    key: '_wrapperClasses',\n    value: function _wrapperClasses() {\n      var _props = this.props,\n          baseClass = _props.baseClass,\n          wrapperClass = _props.wrapperClass,\n          bsSize = _props.bsSize,\n          disabled = _props.disabled,\n          readonly = _props.readonly,\n          inverse = _props.inverse,\n          tristate = _props.tristate,\n          animate = _props.animate,\n          id = _props.id;\n      var _state = this.state,\n          skipAnimation = _state.skipAnimation,\n          focus = _state.focus,\n          dragStart = _state.dragStart;\n\n      var value = this._getValue();\n\n      var classes = [baseClass, wrapperClass];\n      classes.push(baseClass + (value ? \"-on\" : \"-off\"));\n      if (bsSize) classes.push(baseClass + \"-\" + bsSize);\n      if (disabled) classes.push(baseClass + \"-disabled\");\n      if (readonly) classes.push(baseClass + \"-readonly\");\n      if (value === null) classes.push(baseClass + \"-indeterminate\");\n      if (inverse) classes.push(baseClass + \"-inverse\");\n      if (tristate) classes.push(baseClass + \"-tristate\");\n      if (id) classes.push(baseClass + \"-\" + id);\n      if (animate && !dragStart && !skipAnimation) classes.push(baseClass + \"-animate\");\n      if (focus) classes.push(baseClass + \"-focused\");\n      return classes.join(\" \");\n    }\n  }, {\n    key: '_recalculateWidth',\n    value: function _recalculateWidth(animate) {\n      var _this3 = this;\n\n      var onHandle = _reactDom2.default.findDOMNode(this.elmOnHandle);\n\n      var offHandle = _reactDom2.default.findDOMNode(this.elmOffHandle);\n\n      var label = _reactDom2.default.findDOMNode(this.elmLabel); // assuming that if the elms need to be resized, the size will be cleared elsewhere first\n\n\n      var _props2 = this.props,\n          handleWidth = _props2.handleWidth,\n          labelWidth = _props2.labelWidth;\n      var newHandleWidth = handleWidth == \"auto\" ? Math.max(onHandle.offsetWidth, offHandle.offsetWidth) : handleWidth;\n      var newLabelWidth = labelWidth == \"auto\" ? Math.max(newHandleWidth, label.offsetWidth) : labelWidth;\n      return this.setState({\n        handleWidth: newHandleWidth,\n        labelWidth: newLabelWidth\n      }, function () {\n        _this3._updateContainerPosition(!animate);\n      });\n    }\n  }, {\n    key: '_updateContainerPosition',\n    value: function _updateContainerPosition(noAnimate) {\n      var _state2 = this.state,\n          handleWidth = _state2.handleWidth,\n          offset = _state2.offset;\n      var inverse = this.props.inverse;\n\n      var value = this._getValue(); // skip animating if no offset yet\n\n\n      var skipAnimation = noAnimate || offset == null;\n      var newOffset = offset;\n\n      if (handleWidth === 'auto') {\n        newOffset = 0;\n      } else if (value === null) {\n        newOffset = -(handleWidth / 2);\n      } else if (value) {\n        newOffset = inverse ? -handleWidth : 0;\n      } else {\n        newOffset = inverse ? 0 : -handleWidth;\n      }\n\n      return this.setState({\n        skipAnimation: skipAnimation,\n        offset: newOffset\n      });\n    }\n  }, {\n    key: '_disableUserInput',\n    value: function _disableUserInput() {\n      var _props3 = this.props,\n          disabled = _props3.disabled,\n          readonly = _props3.readonly;\n      return disabled || readonly;\n    }\n  }, {\n    key: '_handleOnClick',\n    value: function _handleOnClick() {\n      if (this._disableUserInput()) return;\n\n      this._setValue(this.props.tristate ? this._getValue() == null : false);\n\n      this._setFocus();\n    }\n  }, {\n    key: '_handleOffClick',\n    value: function _handleOffClick() {\n      if (this._disableUserInput()) return;\n\n      this._setValue(this.props.tristate ? this._getValue() != null : true);\n\n      this._setFocus();\n    }\n  }, {\n    key: '_handleKeyPress',\n    value: function _handleKeyPress(e) {\n      if (!e.which || this._disableUserInput()) return;\n      var inverse = this.props.inverse;\n\n      switch (e.which) {\n        case 37:\n          return this._setValue(inverse);\n\n        case 39:\n          return this._setValue(!inverse);\n      }\n    }\n  }, {\n    key: '_handleLabelMouseDown',\n    value: function _handleLabelMouseDown(e) {\n      if (this.state.dragStart || this._disableUserInput()) return;\n      this.setState({\n        dragStart: (e.pageX || e.touches[0].pageX) - this.state.offset\n      });\n\n      this._setFocus();\n    }\n  }, {\n    key: '_handleLabelMouseMove',\n    value: function _handleLabelMouseMove(e) {\n      var _state3 = this.state,\n          dragStart = _state3.dragStart,\n          handleWidth = _state3.handleWidth;\n      if (dragStart === undefined || dragStart === null || dragStart === false) return;\n      var difference = (e.pageX || e.touches[0].pageX) - dragStart;\n      if (difference < -handleWidth || difference > 0) return;\n      this.setState({\n        skipAnimation: false,\n        offset: difference,\n        dragged: true\n      });\n    }\n  }, {\n    key: '_handleLabelTouchEnd',\n    value: function _handleLabelTouchEnd() {\n      var _this4 = this;\n\n      var _state4 = this.state,\n          dragStart = _state4.dragStart,\n          dragged = _state4.dragged,\n          offset = _state4.offset,\n          handleWidth = _state4.handleWidth;\n      if (dragStart === undefined || dragStart === null || dragStart === false) return; // If the touch ended without motion, then either a mousedown event should fire, or it was a long press and should do nothing\n\n      if (!dragged || dragged === undefined || dragged === null) {\n        this.setState({\n          dragStart: false,\n          dragged: false\n        });\n        return;\n      }\n\n      var inverse = this.props.inverse;\n      var val = offset > -(handleWidth / 2);\n      val = inverse ? !val : val;\n      this.setState({\n        dragStart: false,\n        dragged: false,\n        value: val\n      }, function () {\n        _this4._updateContainerPosition();\n\n        _this4._fireStateChange(val);\n      });\n    }\n  }, {\n    key: '_handleLabelMouseUp',\n    value: function _handleLabelMouseUp() {\n      var _this5 = this;\n\n      var _state5 = this.state,\n          dragStart = _state5.dragStart,\n          dragged = _state5.dragged,\n          offset = _state5.offset,\n          handleWidth = _state5.handleWidth;\n\n      var value = this._getValue();\n\n      if (dragStart === undefined || dragStart === null || dragStart === false) return;\n      var _props4 = this.props,\n          inverse = _props4.inverse,\n          tristate = _props4.tristate;\n      var val = void 0;\n\n      if (dragged) {\n        val = offset > -(handleWidth / 2);\n        val = inverse ? !val : val;\n      } else if (tristate) {\n        val = value === null ? true : null;\n      } else {\n        val = !value;\n      }\n\n      this.setState({\n        dragStart: false,\n        dragged: false,\n        value: val\n      }, function () {\n        _this5._updateContainerPosition();\n\n        _this5._fireStateChange(val);\n      });\n    }\n  }, {\n    key: '_setFocus',\n    value: function _setFocus() {\n      this.setState({\n        focus: true\n      });\n    }\n  }, {\n    key: '_setBlur',\n    value: function _setBlur() {\n      this.setState({\n        focus: false\n      });\n    }\n  }, {\n    key: '_setValue',\n    value: function _setValue(val) {\n      var _this6 = this;\n\n      var value = this._getValue();\n\n      if (val === value) return;\n      var newValue = val === undefined ? !value : val;\n      this.setState({\n        value: newValue\n      }, function () {\n        _this6._updateContainerPosition();\n\n        _this6._fireStateChange(newValue);\n      });\n    }\n  }, {\n    key: '_fireStateChange',\n    value: function _fireStateChange(newValue) {\n      var _this7 = this;\n\n      var onChange = this.props.onChange;\n      if (typeof onChange != \"function\") return;\n      setTimeout(function () {\n        return onChange(_this7, newValue);\n      }, 0);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props5 = this.props,\n          baseClass = _props5.baseClass,\n          inverse = _props5.inverse;\n      var _state6 = this.state,\n          handleWidth = _state6.handleWidth,\n          labelWidth = _state6.labelWidth,\n          offset = _state6.offset;\n\n      var onHandle = this._renderOnHandle();\n\n      var offHandle = this._renderOffHandle();\n\n      var containerWidth = labelWidth + handleWidth * 2;\n      var wrapperWidth = labelWidth + handleWidth;\n      if (containerWidth == wrapperWidth || handleWidth == \"auto\" || labelWidth == \"auto\") containerWidth = wrapperWidth = \"auto\";\n      var wrapperParams = {\n        className: this._wrapperClasses(),\n        style: {\n          width: wrapperWidth\n        },\n        tabIndex: \"0\",\n        onKeyDown: this._handleKeyPress.bind(this),\n        onFocus: this._setFocus.bind(this),\n        onBlur: this._setBlur.bind(this)\n      };\n      var containerParams = {\n        className: baseClass + '-container',\n        style: {\n          width: containerWidth,\n          marginLeft: offset\n        }\n      };\n      return _react2.default.createElement('div', wrapperParams, _react2.default.createElement('div', containerParams, inverse ? offHandle : onHandle, this._renderLabel(), inverse ? onHandle : offHandle));\n    }\n  }, {\n    key: '_renderOnHandle',\n    value: function _renderOnHandle() {\n      var _this8 = this;\n\n      var _props6 = this.props,\n          baseClass = _props6.baseClass,\n          onColor = _props6.onColor,\n          onText = _props6.onText;\n      var handleWidth = this.state.handleWidth;\n      var params = {\n        ref: function ref(e) {\n          return _this8.elmOnHandle = e;\n        },\n        style: {\n          width: handleWidth\n        },\n        className: baseClass + '-handle-on ' + baseClass + '-' + onColor,\n        onClick: this._handleOnClick.bind(this)\n      };\n      return _react2.default.createElement('span', params, onText);\n    }\n  }, {\n    key: '_renderOffHandle',\n    value: function _renderOffHandle() {\n      var _this9 = this;\n\n      var _props7 = this.props,\n          baseClass = _props7.baseClass,\n          offColor = _props7.offColor,\n          offText = _props7.offText;\n      var handleWidth = this.state.handleWidth;\n      var params = {\n        ref: function ref(e) {\n          return _this9.elmOffHandle = e;\n        },\n        style: {\n          width: handleWidth\n        },\n        className: baseClass + '-handle-off ' + baseClass + '-' + offColor,\n        onClick: this._handleOffClick.bind(this)\n      };\n      return _react2.default.createElement('span', params, offText);\n    }\n  }, {\n    key: '_renderLabel',\n    value: function _renderLabel() {\n      var _this10 = this;\n\n      var _props8 = this.props,\n          baseClass = _props8.baseClass,\n          labelText = _props8.labelText;\n      var labelWidth = this.state.labelWidth;\n      var params = {\n        ref: function ref(e) {\n          return _this10.elmLabel = e;\n        },\n        style: {\n          width: labelWidth\n        },\n        className: baseClass + '-label',\n        onTouchStart: this._handleLabelMouseDown.bind(this),\n        onTouchMove: this._handleLabelMouseMove.bind(this),\n        onTouchEnd: this._handleLabelTouchEnd.bind(this),\n        onMouseDown: this._handleLabelMouseDown.bind(this),\n        onMouseMove: this._handleLabelMouseMove.bind(this),\n        onMouseUp: this._handleLabelMouseUp.bind(this),\n        onMouseLeave: this._handleLabelMouseUp.bind(this)\n      };\n      return _react2.default.createElement('span', params, labelText);\n    }\n  }]);\n\n  return Switch;\n}(_react2.default.Component);\n\nexports.default = Switch;\nSwitch.defaultProps = {\n  baseClass: 'bootstrap-switch',\n  wrapperClass: 'wrapper',\n  bsSize: null,\n  handleWidth: 'auto',\n  labelWidth: 'auto',\n  onColor: 'primary',\n  offColor: 'default',\n  onText: 'ON',\n  offText: 'OFF',\n  labelText: ' ',\n  inverse: false,\n  animate: true,\n  disabled: false,\n  readonly: false,\n  tristate: false,\n  defaultValue: true,\n  value: undefined\n};\nSwitch.propTypes = {\n  baseClass: _propTypes2.default.string,\n  wrapperClass: _propTypes2.default.string,\n  bsSize: _propTypes2.default.string,\n  handleWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  labelWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  onColor: _propTypes2.default.string,\n  offColor: _propTypes2.default.string,\n  onText: _propTypes2.default.node,\n  offText: _propTypes2.default.node,\n  labelText: _propTypes2.default.node,\n  inverse: _propTypes2.default.bool,\n  animate: _propTypes2.default.bool,\n  disabled: _propTypes2.default.bool,\n  readonly: _propTypes2.default.bool,\n  tristate: _propTypes2.default.bool,\n  defaultValue: _propTypes2.default.bool,\n  value: _propTypes2.default.bool,\n  onChange: _propTypes2.default.func\n};","map":null,"metadata":{},"sourceType":"script"}